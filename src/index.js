const nunjucks = require('nunjucks');
const path = require('path');
const fs = require('fs');
const _ = require('lodash');

const getSvsgInDir = require('./helpers/getSvgsInDir');
const minifySvg = require('./helpers/minifySvg');
const { cleanupName, cleanupSvg } = require('./helpers/cleanup');

nunjucks.configure({ autoescape: false });

const defaultTemplate = path.join(__dirname, '..', 'template', 'icon.nunjucks');
const defaultIconTemplate = path.join(__dirname, '..', 'template', 'split-icons.nunjucks');
const defaultComment = 'Generated by gulp icon - do not modify manually';
const defaultMode = 'single';

const generateIcons = (results) => {
    return results.map((result) => {
        let { name, svg } = result;
        name = cleanupName(name);
        svg = cleanupSvg(svg.data);
        const camelCaseName = _.camelCase(name);
        const capitalizeName = camelCaseName.charAt(0).toUpperCase() + camelCaseName.slice(1);
        return {
            name,
            capitalizeName,
            svg
        };
    });
};

const createIconsByDefaultMode = (results, destination, template, comment) => {
    const icons = generateIcons(results).sort((a, b) => a.name.localeCompare(b.name));
    const config = nunjucks.renderString(template, { icons, comment });
    fs.writeFileSync(destination, config);

    return icons;
};

const createIconsBySplitMode = (results, destination, iconDestination, template, iconTemplate, comment) => {
    results.forEach((result) => {
        const { name, svg } = result;
        const camelCaseName = _.camelCase(name);
        const capitalizeName = camelCaseName.charAt(0).toUpperCase() + camelCaseName.slice(1);
        const icon = { name: cleanupName(name), capitalizeName, svg: cleanupSvg(svg.data) };
        const config = nunjucks.renderString(template, { icon, comment });
        const filePath = `${iconDestination}${capitalizeName}Icon.tsx`;
        fs.writeFileSync(filePath, config);
    });

    const icons = generateIcons(results)
        .sort((a, b) => a.name.localeCompare(b.name));
    fs.writeFileSync(destination, nunjucks.renderString(iconTemplate, { icons, comment }));

    return icons;
};

const createVariables = (config) => {
    const template = config.template || defaultTemplate;
    const templateFile = path.isAbsolute(template) ? template : path.join(process.cwd(), template);

    const iconTemplate = config.iconTemplate || defaultIconTemplate;
    const iconTemplateFile = path.isAbsolute(iconTemplate) ? iconTemplate : path.join(process.cwd(), iconTemplate);

    const templateContent = fs.readFileSync(templateFile).toString();
    const templateIconContent = fs.readFileSync(iconTemplateFile).toString();


    const svgDir = path.isAbsolute(config.svgDir) ? config.svgDir : path.join(process.cwd(), config.svgDir);
    const fileMode = config.mode || defaultMode;

    console.log('Looking for SVG Icons in:', svgDir); // eslint-disable-line no-console
    console.log('Using template mode:', fileMode); // eslint-disable-line no-console
    console.log('Using Icons template from:', templateFile); // eslint-disable-line no-console
    console.log('Using Icon template from:', iconTemplateFile); // eslint-disable-line no-console

    const svgs = getSvsgInDir(svgDir);
    const iconDestination = config.destination || path.join(process.cwd(), 'Icon.react.js');
    const eachIconDestination = config.iconDestination || path.join(process.cwd(), 'Icon.react.js');
    const comment = config.comment || defaultComment;
    const svgPromises = svgs.map(file => minifySvg(file, fs.readFileSync(file).toString()));
    return {
        svgPromises,
        iconDestination,
        eachIconDestination,
        templateContent,
        templateIconContent,
        comment,
        fileMode
    };
};

module.exports = (config) => {
    const { svgPromises,
        iconDestination,
        eachIconDestination,
        templateContent,
        templateIconContent,
        comment,
        fileMode
    } = createVariables(config);

    return Promise.all(svgPromises)
        .then((results) => {
            let icons = [];
            if (fileMode === 'split') {
                icons = createIconsBySplitMode(
                    results,
                    iconDestination,
                    eachIconDestination,
                    templateContent,
                    templateIconContent,
                    comment,
                );
            }
            else {
                icons = createIconsByDefaultMode(
                    results,
                    iconDestination,
                    templateContent,
                    comment
                );
            }
            console.log('Generated SVG Icon component to:', iconDestination); // eslint-disable-line no-console
            console.log(icons.map(icon => `<Icon kind="${icon.name}" />`).join('\n')); // eslint-disable-line no-console
        })
        .catch(error => console.error(error)); // eslint-disable-line no-console
};
